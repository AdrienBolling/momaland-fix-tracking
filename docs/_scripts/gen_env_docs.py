"""
This script reads documentation from /momaland and puts it into md files inside the docs/ directory
"""

import os
import re
from dataclasses import dataclass
from functools import reduce

from tqdm import tqdm

from momaland.utils.all_modules import all_environments


def trim(docstring):
    if not docstring:
        return ""
    # Convert tabs to spaces (following the normal Python rules)
    # and split into a list of lines:
    lines = docstring.expandtabs().splitlines()
    # Determine minimum indentation (first line doesn't count):
    indent = 232323
    for line in lines[1:]:
        stripped = line.lstrip()
        if stripped:
            indent = min(indent, len(line) - len(stripped))
    # Remove indentation (first line is special):
    trimmed = [lines[0].strip()]
    if indent < 232323:
        for line in lines[1:]:
            trimmed.append(line[indent:].rstrip())
    # Strip off trailing and leading blank lines:
    while trimmed and not trimmed[-1]:
        trimmed.pop()
    while trimmed and not trimmed[0]:
        trimmed.pop(0)
    # Return a single string:
    return "\n".join(trimmed)


def check_homogeneous_agents(agent_lst):
    """Check if all agents share the same naming scheme."""
    agent_names = [name.split("_")[0] for name in agent_lst]
    first_name = agent_names[0]
    if all(name == first_name for name in agent_names[1:]):
        return True


def str_format_representative_agent(agent_lst):
    """Format a string for a list of agents."""
    agent_name = agent_lst[0].split("_")[0]
    agent_str = f"{agent_name}_i for i in [0, {len(agent_lst) - 1}]"
    return agent_str


def check_homogeneous_spaces(spaces):
    """Check if all spaces are homogeneous."""
    return all(space == spaces[0] for space in spaces[1:])


pattern = re.compile(r"(?<!^)(?=[A-Z])")


@dataclass
class EnvSpec:
    id: str
    module: object
    version: int


filtered_envs_by_type = {}

# Obtain filtered list
for env_id, env_module in tqdm(all_environments.items()):
    env_version = int(env_id.split("_v")[-1])
    env_type = "environments"

    try:
        if env_type not in filtered_envs_by_type.keys():
            filtered_envs_by_type[env_type] = {}
        # only store new entries and higher versions
        if env_id not in filtered_envs_by_type[env_type] or (
            env_id in filtered_envs_by_type[env_type] and env_version > filtered_envs_by_type[env_type][env_id].version
        ):
            filtered_envs_by_type[env_type][env_id] = EnvSpec(env_id, env_module, env_version)

    except Exception as e:
        print(e)

# Sort
filtered_envs = list(
    reduce(
        lambda s, x: s + x,
        map(
            lambda arr: sorted(arr, key=lambda x: x.id),
            map(lambda dic: list(dic.values()), list(filtered_envs_by_type.values())),
        ),
        [],
    )
)

env_dir = os.path.join(os.path.dirname(__file__), "..", "environments")
dir_exists = os.path.exists(env_dir)
if not dir_exists:
    # Create a new directory because it does not exist
    os.makedirs(env_dir)
    print("environments directory has been created!")


# Update Docs
for i, env_spec in tqdm(enumerate(filtered_envs)):
    print("ID:", env_spec.id)
    env_type = str(env_spec.module).split(".")[2]
    try:
        env = env_spec.module.parallel_env()
        env.reset()

        docstring = env.unwrapped.__doc__
        if not docstring:
            docstring = env.unwrapped.__class__.__doc__
        docstring = trim(docstring)

        # pascal case
        pascal_env_name = env_spec.id
        snake_env_name = pattern.sub("_", pascal_env_name).lower()
        # remove what is after the last "-" in snake_env_name e.g. "_v0"
        snake_env_name = snake_env_name[: snake_env_name.rfind("_")]
        title_env_name = snake_env_name.replace("_", " ").title().replace("Mo-", "MO-")
        env_type_title = env_type.replace("_", " ").title()
        related_pages_meta = ""
        if i == 0 or not env_type == str(filtered_envs[i - 1].module).split(".")[2]:
            related_pages_meta = "firstpage:\n"
        elif i == len(filtered_envs) - 1 or not env_type == str(filtered_envs[i + 1].module).split(".")[2]:
            related_pages_meta = "lastpage:\n"

        front_matter = f"""---
autogenerated:
title: {title_env_name}
{related_pages_meta}---
"""
        title = f"# {title_env_name}"
        if "rgb_array" in env.metadata["render_modes"] or "crazyrl" in env_type:
            gif = "```{figure}" + f" ../_static/gifs/{snake_env_name}.gif" + f" \n:width: 200px\n:name: {snake_env_name}\n```"
        else:
            gif = ""
        info = (
            "This environment is part of the "
            + f"<a href='..'>{env_type_title} environments</a>."
            + "Please read that page first for general information."
        )
        env_table = "|   |   |\n|---|---|\n"
        action_spaces = [env.action_space(agent) for agent in env.possible_agents]
        obs_spaces = [env.observation_space(agent) for agent in env.possible_agents]
        rew_spaces = [env.reward_space(agent) for agent in env.possible_agents]
        if check_homogeneous_agents(env.possible_agents):
            env_str = str_format_representative_agent(env.possible_agents)
        else:
            env_str = env.possible_agents
        env_table += f"| Agents names | `{env_str}` |\n"
        if check_homogeneous_spaces(action_spaces):
            action_space_str = action_spaces[0]
        else:
            action_space_str = [f"{agent}: {space}" for agent, space in enumerate(action_spaces)]
        env_table += f"| Action Space | {action_space_str} |\n"
        if check_homogeneous_spaces(obs_spaces):
            obs_space_str = obs_spaces[0]
        else:
            obs_space_str = [f"{agent}: {space}" for agent, space in enumerate(obs_spaces)]
        env_table += f"| Observation Space | {obs_space_str} |\n"
        if check_homogeneous_spaces(rew_spaces):
            rew_space_str = rew_spaces[0]
        else:
            rew_space_str = [f"{agent}: {space}" for agent, space in enumerate(rew_spaces)]
        env_table += f"| Reward Space | {rew_space_str} |\n"

        env_table += f"| Import | `momaland.envs.{env_spec.id}` | \n"

        if docstring is None:
            docstring = "No information provided"
        all_text = f"""{front_matter}
{title}
{gif}
{env_table}
{docstring}
"""
        v_path = os.path.join(
            os.path.dirname(__file__),
            "..",
            "environments",
            # env_type,
            snake_env_name + ".md",
        )
        file = open(v_path, "w+", encoding="utf-8")
        file.write(all_text)
        file.close()
    except Exception as e:
        print(e)
